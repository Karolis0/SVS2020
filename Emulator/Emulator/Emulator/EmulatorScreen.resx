<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAaKDyJNVJ790Fllv9AZZb+OViC/jFIaP9AWHj/Wnum/2iLuf9vkr//cpTB/3KVwf9xk8D/a426/2uP
        vf9jir7/SmqU/ys9Vv8vQ13/NExs/ztYff9SdaP/aY27/09piv8nNknqBAYJMgQGCQAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAIDBBEeLkSFN1Z/8TVSev88VXX/YH6n/3GUwf90l8T/dZjE/3WYxP91mMT/dZfD/3SX
        w/92l8H/aYOm/157oP9bgrX/TnWn/zpYgP8tRGL/Kj5Y/0Naef9Xc5f/SGOG/zFHZNEAAAAXCQ8XAAAA
        AAAAAAAAAAAAAAAAAAAAAAAADxEVAAgFAggdJjSOMUFW/V15nv9acpH/ZX+g/2eDp/9lgqj/aomy/3SW
        wv92mMT/e5rD/3SHn/94gYz/gYuX/19yjP9Vean/WoO6/1uDuP9ega//aoqz/1Bqi/8zRl//JjhOkgAA
        AAAhMEQAAAAAAAAAAAAAAAAAAAAAAAAAAAALDAwAFBQVFR0eH6Y7QEb/VF9u/05WYP9fZW3/YGl0/297
        i/+Bkaf/mK7K/4acuP91iKH/jJqs/7C/0v+ru9D/i5yz/2yAmf96lrr/gZq6/2x7j/+AjZ7/ZnKB/2Vv
        fP9ITlarGRobPgMDBAUODxAAAAAAAAAAAAAAAAAAAAAAAJqamgdFRUU7MjQ3vk1RV/9GUF7/ZnKB/7S/
        zf++ytn/wMzb/8HN3f+1wM//f4qY/3iOqv5lfqD+S2B9/kNbfP5nf57+mavD/46esv+dqrz/r7rI/77I
        1f+stcD/rbS9/3h+hv8iJirVERMVJhweIgAAAAAAAAAAAAAAAAAAAAAADw8PCA0NDUwmJyq6YGZt/Gdx
        f/+Kma3/tMDP/8DL2f/G0uD/w8/d/5KcqP+ToLD/na3C/4aatf5BV3b+N1J4/oKZuf6quMr/nq7C/5mn
        uf+zwND/uMPS/7C7yP+wucX/mKKu/05WYPgfJCqCjZCUJXBzdg50d3sAAAAAAAAAAAAUFBQAAwMCLCEj
        J8hfY2n/ZXKD/3WPsf6essz/ucfZ/8fS4f+7xdL/l5+q/6q1w/+tuMb/jZ2z/ztGdf8vPGb/cIel/rC8
        zf+1wM7/rrvL/7rH2P+yvs3/q7XB/8PN2v+zvcv/bXaC/lthaNg/Q0jVJyouYQAAAAAYFxQAAAAAABcX
        GAAKCQcVLDA1oVtgaP5hcYb/XneX/3eStv+Npsb/scPZ/6e0xf+Nmqv/oa/B/5inuP9OXXb/OkiB/z1O
        hf9CV3f/hZu4/6i3y/+0v83/tsTX/5yxzP+essz/qLnP/6y6y/+cp7b/aG93/z1CR/oqMz6KFSIyDhso
        NwALJ2IA8PHxAEVHSgBdX2EqXGJp3XmMpv9jepn/UGF4/1xykP9siKv/f5u//4ijxv+Ho8j/X3iZ/z9f
        i/9CZZf/Rmqb/09vmf9ZdJb/d5a+/42lxP+Sqsj/fpzD/36bwf9whqL/cYSd/5GesP9udX3/QE9h/SQ3
        UNEaKT4vHSxCABI4fgAAAAAATk9PAEpGQAQ4Oz6OY3KG/3iVu/82RFj/VnCT/1tzk/9edJH/b4yz/3aY
        xf9oirX/UXmu/055sv9QfLX/XoW4/2eHsP9ojLr/XIGy/118pf+AncP/eZO0/22Hqf9zjrL/YnOJ/1hn
        e/87UGziFyY5TUFmmQIvSW0AAAAAAAAAAAD///8AUVNWAGJiYidXYW7KfJe6/0pddv9eeJr/XXic/0Rg
        hv9dgK3/dZjE/3SWw/9cg7b/T3qz/1B7tP9ag7f/b5LA/2mNu/9VfrT/Q2eW/0FehP9XdZ3/X3ug/1du
        jP9KXnj/WnaZ/y4/VHr///8ABQcKAAAAAAAAAAAAAAAAAP///wD4+PkA////Anl+hU9pfpvoYIKw/z5c
        g/86V37/QmWU/1uCtv90l8X/c5bC/16Et/9Qe7P/UHu0/1d/tP9qjLn/gJ7F/3GSvv9RerD/RGqb/z9g
        jf9Gapv/R2aQ/2WFrv9QaIjlLjxOMiMuPgDc//8AAAAAAAAAAAAAAAAAAAAAAAAAAAA9S18APklZIDtV
        eddHbJ3/SnGl/z5fiv9IZYz/Xn+p/117oP90kbb/XoKy/096s/9Qe7T/U3ms/2+GpP94h5j/nK2//3uY
        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
        qf81Rl7TBAoSFwoPFwAAAAAAAAAAAAAAAAAAAAAAAAAAAAIDBQAHChABAAABkwMEBJ1xeIEy0NzpEHiJ
        owD9//8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANGioAAAMXAx4n
        M1RGUmHfVmZ8/yYyQpAAAAABBwsQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAAABARcAAAGhAAAAOgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAEAcajvAA4VHksNFB3mAwQGfBMcKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOQAA
        AJIAAAAiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAHkAAADAAAAARgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAABOAAAAYAAAAA0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKwAAAJkAAACkAAAAMAAAAAEAAAAAAAAAAAAA
        AAAAAAAAAAAABQAAAEMAAAAnAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAALwAAAG4AAABRAAAABQAA
        AAAAAAAAAAAAAAAAAAAAAAADAAAAEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFwAA
        ADAAAAAPAAAAAAAAAAAAAAAAAAAAPwAAAD+AAAB/gAAAHwAAAB8AAAAHgAAAB4AAAAPAAAADwAAAA+AA
        AA/gAAAP8AAAD/AAAB/wAAAf+AAAH/gAAD/wAAA/8AAAP/AAAD/wAAA/8AAAH+AAAB/gP+Af4D/wH+D/
        +B/B//gfx//+P8f//h/H//8Hh///B5///8c=
</value>
  </data>
</root>